---
# tasks file for sou_podman
- name: Show hostname
  command: "hostname"
  register: hostname_output
- debug:
    var: hostname_output.stdout_lines

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled

- name: Create volume dir
  ansible.builtin.file:
    path: /containers_vols
    state: directory
    mode: '0755'

- name: installing podman
  package:
    name: podman
    state: present

# HAPROXY

- name: Create group
  ansible.builtin.group:
    name: "{{ haproxy_id }}"
    state: present
  when: context == 'frontend'

- name: Create user and add to the group
  ansible.builtin.user:
    name: "{{ haproxy_id }}"
    comment: haproxy applications user
    group: "{{ haproxy_id }}"
  when: context == 'frontend'

- name: Create haproxy dirs
  ansible.builtin.file:
    path: "{{ haproxy_path }}/{{ item }}"
    state: directory
    owner: "{{ haproxy_id }}"
    group: "{{ haproxy_id }}"
    mode: '0755'
  with_items: ['conf', 'certificates', 'certificates/crt', 'certificates/pem']
  when: context == 'frontend'

- name: Create private key (RSA, 4096 bits)
  community.crypto.openssl_privatekey:
    path: "{{ haproxy_path }}/certificates/crt/haproxy.local.key"
  when: context == 'frontend'

- name: Create certificate signing request (CSR) for self-signed certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ haproxy_path }}/certificates/crt/haproxy.local.key"
    common_name: haproxy.local
    organization_name: ACME, Inc.
    subject_alt_name:
      - "DNS:haproxy.some"
  register: csr
  when: context == 'frontend'

- name: Create self-signed certificate from CSR
  community.crypto.x509_certificate:
    path: "{{ haproxy_path }}/certificates/crt/haproxy.local.crt"
    csr_content: "{{ csr.csr }}"
    privatekey_path: "{{ haproxy_path }}/certificates/crt/haproxy.local.key"
    provider: selfsigned
  when: context == 'frontend'

- name: Assemble from fragments from a directory
  ansible.builtin.assemble:
    src: "{{ haproxy_path }}/certificates/crt"
    dest: "{{ haproxy_path }}/certificates/pem/haproxy.local.pem"
  when: context == 'frontend'

- name: Configure haproxy
  template: src=haproxy.cfg.j2 dest=/containers_vols/haproxy/conf/haproxy.cfg
  when: context == 'frontend'

- name: Create the haproxy container
  containers.podman.podman_container:
    name: haproxy
    image: haproxy:alpine
    publish: "{{ haproxy_port_bind }}"
    volume:
      - /containers_vols/haproxy/conf/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:z
      - /containers_vols/haproxy/certificates:/usr/local/certificates:z
    state: started
  when: context == 'frontend'

# GRAFANA

- name: Create group
  ansible.builtin.group:
    name: "{{ grafana_id }}"
    state: present
  when: context == 'backend'

- name: Create user and add to the group
  ansible.builtin.user:
    name: "{{ grafana_id }}"
    comment: grafana applications user
    group: "{{ grafana_id }}"
  when: context == 'backend'

- name: Create grafana dirs
  ansible.builtin.file:
    path: "{{ grafana_path }}/{{ item }}"
    state: directory
    owner: "{{ grafana_id }}"
    group: "{{ grafana_id }}"
    mode: '0755'
  with_items: ['data', 'conf']
  when: context == 'backend'

- name: Configure grafana
  template: src=grafana.ini.j2 dest=/containers_vols/grafana/conf/grafana.ini
  when: context == 'backend'

- name: Create the grafana container
  containers.podman.podman_container:
    name: grafana
    image: grafana/grafana-oss
    publish: "{{ grafana_port_bind }}"
    volume:
      - /containers_vols/grafana/conf/grafana.ini:/etc/grafana/grafana.ini:z
      - /containers_vols/grafana/data:/var/lib/grafana:z,U
    state: started
  when: context == 'backend'

# PROMETHEUS

- name: Create group
  ansible.builtin.group:
    name: "{{ prometheus_id }}"
    state: present
  when: context == 'backend'

- name: Create user and add to the group
  ansible.builtin.user:
    name: "{{ prometheus_id }}"
    comment: prometheus applications user
    group: "{{ prometheus_id }}"
  when: context == 'backend'

- name: Create Prometheus dirs
  ansible.builtin.file:
    path: "{{ prometheus_path }}/{{ item }}"
    state: directory
    owner: "{{ prometheus_id }}"
    group: "{{ prometheus_id }}"
    mode: '0755'
  with_items: ['data', 'conf']
  when: context == 'backend'

- name: Configure Prometheus
  template: src=prometheus.yml.j2 dest=/containers_vols/prometheus/conf/prometheus.yml
  when: context == 'backend'

- name: Create the Prometheus container
  containers.podman.podman_container:
    name: prometheus
    image: prom/prometheus
    command:
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/prometheus/'
      - '--config.file=/etc/prometheus/prometheus.yml'
    volume:
      - /containers_vols/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml:z
      - /containers_vols/prometheus/data:/prometheus:z,U
    publish: "{{ prometheus_port_bind }}" # expose, port
    state: started
  when: context == 'backend'